// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileJO.Data;

namespace MobileJO.Data.Migrations
{
    [DbContext(typeof(BaseCodeEntities))]
    [Migration("20210531004046_decimaltostring")]
    partial class decimaltostring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4ae9dad4-8f71-41a0-b4ab-bcda2efcc462",
                            ConcurrencyStamp = "b5ecd535-5cb3-4b3f-a6de-69fb6f0c0f3d",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "dcaf3e31-2245-4102-86c2-81af14607bea",
                            ConcurrencyStamp = "808afa2b-2e0c-4f54-9a18-ef0102e656b4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactNo")
                        .HasColumnName("ContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPerson")
                        .HasColumnName("ContactPerson")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Memo")
                        .HasColumnName("Memo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Sample Address, Cebu City",
                            ContactNo = "123456789",
                            ContactPerson = "Sample Contact Person",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 58, DateTimeKind.Local).AddTicks(8635),
                            EmailAddress = "sampleaccount@email.com",
                            IsActive = true,
                            Memo = "Sample Memo",
                            Name = "Sample Account",
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 59, DateTimeKind.Local).AddTicks(5661)
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChoiceID")
                        .HasColumnName("ChoiceID");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnName("DateSubmitted");

                    b.Property<DateTime>("LastSyncDate")
                        .HasColumnName("LastSyncDate");

                    b.Property<int>("QuestionID")
                        .HasColumnName("QuestionID");

                    b.Property<int>("ResponseID")
                        .HasColumnName("ResponseID");

                    b.Property<int>("TemplateID")
                        .HasColumnName("TemplateID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserID")
                        .HasColumnName("UserID");

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("AnswerID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionID");

                    b.HasIndex("ResponseID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MobileJO.Data.Models.ApplicationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationName")
                        .HasColumnName("ApplicationName")
                        .HasColumnType("varchar(250)");

                    b.HasKey("ID");

                    b.ToTable("ApplicationType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApplicationName = "Portfolio"
                        },
                        new
                        {
                            ID = 2,
                            ApplicationName = "WebPOS"
                        },
                        new
                        {
                            ID = 3,
                            ApplicationName = "HRIS Notes"
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.AssignedCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnName("AccountID");

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnName("ApplicationTypeID");

                    b.Property<int>("AssignedUserID")
                        .HasColumnName("AssignedUserID");

                    b.Property<string>("CaseNumber")
                        .HasColumnName("CaseNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CaseSubject")
                        .HasColumnName("CaseSubject")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Priority")
                        .HasColumnName("Priority")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApplicationTypeID");

                    b.HasIndex("AssignedUserID");

                    b.ToTable("AssignedCase");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountID = 1,
                            ApplicationTypeID = 1,
                            AssignedUserID = 1,
                            CaseNumber = "1234",
                            CaseSubject = "Sample Case Subject 1",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 63, DateTimeKind.Local).AddTicks(1353),
                            Description = "Sample Description",
                            Priority = "Priority1",
                            Status = "Ongoing",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 63, DateTimeKind.Local).AddTicks(1813)
                        },
                        new
                        {
                            ID = 2,
                            AccountID = 1,
                            ApplicationTypeID = 1,
                            AssignedUserID = 1,
                            CaseNumber = "5678",
                            CaseSubject = "Sample Case Subject 2",
                            CreatedBy = "admin",
                            CreatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 63, DateTimeKind.Local).AddTicks(2429),
                            Description = "Sample Description 2",
                            Priority = "Priority2",
                            Status = "Pending",
                            UpdatedBy = "admin",
                            UpdatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 63, DateTimeKind.Local).AddTicks(2437)
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .HasColumnName("Filename")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("JobOrderID")
                        .HasColumnName("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("MobileJO.Data.Models.BillingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingTypeName")
                        .HasColumnName("BillingTypeName");

                    b.HasKey("ID");

                    b.ToTable("BillingType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BillingTypeName = "Warranty"
                        },
                        new
                        {
                            ID = 2,
                            BillingTypeName = "WebPOS"
                        },
                        new
                        {
                            ID = 3,
                            BillingTypeName = "APS"
                        },
                        new
                        {
                            ID = 4,
                            BillingTypeName = "Pending"
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BranchID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnName("Status");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("BranchID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Choice", b =>
                {
                    b.Property<int>("ChoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChoiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Label")
                        .HasColumnName("Label")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuestionID")
                        .HasColumnName("QuestionID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ChoiceID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<string>("AllowedOrigin");

                    b.Property<bool?>("ApplicationType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RefreshTokenLifeTime");

                    b.Property<string>("Secret");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnName("CompanyName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnName("Status");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("CompanyID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("MobileJO.Data.Models.EmailSetup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TypeID")
                        .HasColumnName("TypeID");

                    b.HasKey("ID");

                    b.HasIndex("TypeID");

                    b.ToTable("EmailSetup");
                });

            modelBuilder.Entity("MobileJO.Data.Models.EmailType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("varchar(5)");

                    b.HasKey("ID");

                    b.ToTable("EmailType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Type = "to"
                        },
                        new
                        {
                            ID = 2,
                            Type = "cc"
                        },
                        new
                        {
                            ID = 3,
                            Type = "bcc"
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.ForgotPassword", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("ResetToken")
                        .HasColumnName("ResetToken")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ForgotPassword");
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnName("AccountID");

                    b.Property<string>("ActivityDetails")
                        .HasColumnName("ActivityDetails")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnName("ApplicationTypeID");

                    b.Property<string>("Attendees")
                        .HasColumnName("Attendees")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Branch")
                        .HasColumnName("Branch")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClientRating")
                        .HasColumnName("ClientRating");

                    b.Property<string>("ClientSignature")
                        .HasColumnName("ClientSignature")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnName("DateTimeEnd");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnName("DateTimeStart");

                    b.Property<bool>("IsBilled")
                        .HasColumnName("IsBilled");

                    b.Property<bool>("IsCollaterals")
                        .HasColumnName("IsCollaterals");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("IsFixed");

                    b.Property<bool>("IsSatisfied")
                        .HasColumnName("IsSatisfied");

                    b.Property<string>("JobOrderNumber")
                        .HasColumnName("JobOrderNumber")
                        .HasColumnType("varchar(9)");

                    b.Property<string>("JobOrderSubject")
                        .HasColumnName("JobOrderSubject")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LastSyncDate")
                        .HasColumnName("LastSyncDate");

                    b.Property<string>("NextStep")
                        .HasColumnName("NextStep")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PreventiveAction")
                        .HasColumnName("PreventiveAction")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("RootCauseAnalysis")
                        .HasColumnName("RootCauseAnalysis")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("StatusID")
                        .HasColumnName("StatusID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApplicationTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("JobOrder");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountID = 1,
                            ActivityDetails = "Sample Activity Details",
                            ApplicationTypeID = 1,
                            Attendees = "Attendees",
                            Branch = "Sample Branch",
                            ClientRating = 0,
                            ClientSignature = "samplesignature.jpg",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 61, DateTimeKind.Local).AddTicks(7628),
                            DateTimeEnd = new DateTime(2021, 5, 31, 8, 40, 45, 60, DateTimeKind.Local).AddTicks(7021),
                            DateTimeStart = new DateTime(2021, 5, 31, 8, 40, 45, 60, DateTimeKind.Local).AddTicks(6087),
                            IsBilled = true,
                            IsCollaterals = true,
                            IsDeleted = false,
                            IsFixed = false,
                            IsSatisfied = false,
                            JobOrderNumber = "JO-00001",
                            JobOrderSubject = "Sample JO Subject",
                            LastSyncDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextStep = "Next Step",
                            PreventiveAction = "PreventiveAction",
                            Remarks = "Remarks",
                            RootCauseAnalysis = "Sample Root Cause Analaysis",
                            StatusID = 1,
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 61, DateTimeKind.Local).AddTicks(8408)
                        },
                        new
                        {
                            ID = 2,
                            AccountID = 1,
                            ActivityDetails = "Sample Activity Details 2",
                            ApplicationTypeID = 1,
                            Attendees = "Attendees 2",
                            Branch = "Sample Branch 2",
                            ClientRating = 3,
                            ClientSignature = "samplesignature2.jpg",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 62, DateTimeKind.Local).AddTicks(247),
                            DateTimeEnd = new DateTime(2021, 5, 31, 8, 40, 45, 62, DateTimeKind.Local).AddTicks(170),
                            DateTimeStart = new DateTime(2021, 5, 31, 8, 40, 45, 62, DateTimeKind.Local).AddTicks(157),
                            IsBilled = true,
                            IsCollaterals = true,
                            IsDeleted = false,
                            IsFixed = true,
                            IsSatisfied = true,
                            JobOrderNumber = "JO-00002",
                            JobOrderSubject = "Sample JO Subject 2",
                            LastSyncDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NextStep = "Next Step 2",
                            PreventiveAction = "Preventive Action 2",
                            Remarks = "Remarks 2",
                            RootCauseAnalysis = "Sample Root Cause Analaysis 2",
                            StatusID = 2,
                            UpdatedBy = 1,
                            UpdatedDate = new DateTime(2021, 5, 31, 8, 40, 45, 62, DateTimeKind.Local).AddTicks(259)
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderBillingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingTypeID")
                        .HasColumnName("BillingTypeID");

                    b.Property<int>("JobOrderID")
                        .HasColumnName("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("BillingTypeID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("JobOrderBillingType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BillingTypeID = 1,
                            JobOrderID = 1
                        },
                        new
                        {
                            ID = 2,
                            BillingTypeID = 2,
                            JobOrderID = 1
                        },
                        new
                        {
                            ID = 3,
                            BillingTypeID = 3,
                            JobOrderID = 1
                        },
                        new
                        {
                            ID = 4,
                            BillingTypeID = 4,
                            JobOrderID = 1
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID");

                    b.ToTable("JobOrderStatus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            ID = 2,
                            Status = "Signed"
                        },
                        new
                        {
                            ID = 3,
                            Status = "Sent"
                        },
                        new
                        {
                            ID = 4,
                            Status = "Requested For Revert"
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.Loan", b =>
                {
                    b.Property<int>("LoanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnName("Age");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnName("ApplicationNumber")
                        .HasColumnType("varchar(9)");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnName("Loan_ApprovedBy");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnName("ApprovedDate");

                    b.Property<int?>("ApprovedDateBy")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate");

                    b.Property<string>("BirthPlace")
                        .HasColumnName("BirthPlace")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("BranchID")
                        .HasColumnName("BranchID");

                    b.Property<string>("BusinessAddress")
                        .HasColumnName("BusinessAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessCapital")
                        .HasColumnName("BusinessCapital")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessHowLong")
                        .HasColumnName("BusinessHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessMonthlyIncomeGross")
                        .HasColumnName("BusinessMonthlyIncomeGross")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessMonthlyIncomeNet")
                        .HasColumnName("BusinessMonthlyIncomeNet")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessName")
                        .HasColumnName("BusinessName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessNature")
                        .HasColumnName("BusinessNature")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BusinessPhoneNo")
                        .HasColumnName("BusinessPhoneNo")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("CityID")
                        .HasColumnName("CityID");

                    b.Property<string>("ClientSignature")
                        .HasColumnName("ClientSignature")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<string>("ConfirmationOfficer")
                        .HasColumnName("ConfirmationOfficer")
                        .HasColumnType("varchar(250)");

                    b.Property<TimeSpan?>("ConfirmationTime")
                        .HasColumnName("ConfirmationTime");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmployedHowLong")
                        .HasColumnName("EmployedHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployedPosition")
                        .HasColumnName("EmployedPosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmployedPresentBusinessAddress")
                        .HasColumnName("EmployedPresentBusinessAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmployedPreviousBusinessAddress")
                        .HasColumnName("EmployedPreviousBusinessAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmployedPreviousEmployment")
                        .HasColumnName("EmployedPreviousEmployment")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EmployedSalary")
                        .HasColumnName("EmployedSalary")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployedTelNo")
                        .HasColumnName("EmployedTelNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("EmployedWhere")
                        .HasColumnName("EmployedWhere")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Facebook")
                        .HasColumnName("Facebook")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherAddress")
                        .HasColumnName("FatherAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("FatherAge")
                        .HasColumnName("FatherAge");

                    b.Property<string>("FatherFacebook")
                        .HasColumnName("FatherFacebook")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherHowLong")
                        .HasColumnName("FatherHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherInLawAddress")
                        .HasColumnName("FatherInLawAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("FatherInLawAge")
                        .HasColumnName("FatherInLawAge");

                    b.Property<string>("FatherInLawFacebook")
                        .HasColumnName("FatherInLawFacebook")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherInLawHowLong")
                        .HasColumnName("FatherInLawHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherInLawIncomeSource")
                        .HasColumnName("FatherInLawIncomeSource")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherInLawName")
                        .HasColumnName("FatherInLawName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherInLawOfficeAddress")
                        .HasColumnName("FatherInLawOfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherInLawPosition")
                        .HasColumnName("FatherInLawPosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherIncomeSource")
                        .HasColumnName("FatherIncomeSource")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherName")
                        .HasColumnName("FatherName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherOfficeAddress")
                        .HasColumnName("FatherOfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatherPosition")
                        .HasColumnName("FatherPosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("HouseMade")
                        .HasColumnName("HouseMade")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("HouseUnitBuildingNo")
                        .HasColumnName("HouseUnitBuildingNo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Industry")
                        .HasColumnName("Industry")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsAgreed")
                        .HasColumnName("IsAgreed");

                    b.Property<string>("Land")
                        .HasColumnName("Land")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Landmark")
                        .HasColumnName("Landmark")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("LoanStatus")
                        .HasColumnName("LoanStatus");

                    b.Property<string>("MaritalStatus")
                        .HasColumnName("MaritalStatus")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("MotherAddress")
                        .HasColumnName("MotherAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("MotherAge")
                        .HasColumnName("MotherAge");

                    b.Property<string>("MotherFacebook")
                        .HasColumnName("MotherFacebook")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherHowLong")
                        .HasColumnName("MotherHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherInLawAddress")
                        .HasColumnName("MotherInLawAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("MotherInLawAge")
                        .HasColumnName("MotherInLawAge");

                    b.Property<string>("MotherInLawFacebook")
                        .HasColumnName("MotherInLawFacebook")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherInLawHowLong")
                        .HasColumnName("MotherInLawHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotherInLawIncomeSource")
                        .HasColumnName("MotherInLawIncomeSource")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherInLawName")
                        .HasColumnName("MotherInLawName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherInLawOfficeAddress")
                        .HasColumnName("MotherInLawOfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherInLawPosition")
                        .HasColumnName("MotherInLawPosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherIncomeSource")
                        .HasColumnName("MotherIncomeSource")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherMaidenName")
                        .HasColumnName("MotherMaidenName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherOfficeAddress")
                        .HasColumnName("MotherOfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MotherPosition")
                        .HasColumnName("MotherPosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OfficeUseAmount")
                        .HasColumnName("OfficeUseAmount")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("OfficeUseCADate")
                        .HasColumnName("OfficeUseCADate");

                    b.Property<string>("OfficeUseCAName")
                        .HasColumnName("OfficeUseCAName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OfficeUseCARemarks")
                        .HasColumnName("OfficeUseCARemarks")
                        .HasColumnType("varchar(250)");

                    b.Property<TimeSpan?>("OfficeUseCATime")
                        .HasColumnName("OfficeUseCATime");

                    b.Property<DateTime?>("OfficeUseCCSDate")
                        .HasColumnName("OfficeUseCCSDate");

                    b.Property<string>("OfficeUseCCSName")
                        .HasColumnName("OfficeUseCCSName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OfficeUseCCSRemarks")
                        .HasColumnName("OfficeUseCCSRemarks")
                        .HasColumnType("varchar(250)");

                    b.Property<TimeSpan?>("OfficeUseCCSTime")
                        .HasColumnName("OfficeUseCCSTime");

                    b.Property<string>("OfficeUseCashier")
                        .HasColumnName("OfficeUseCashier")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("OfficeUseInvoiceDate")
                        .HasColumnName("OfficeUseInvoiceDate");

                    b.Property<string>("OfficeUseInvoiceNo")
                        .HasColumnName("OfficeUseInvoiceNo")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("OfficeUseORDate")
                        .HasColumnName("OfficeUseORDate");

                    b.Property<string>("OfficeUseORNo")
                        .HasColumnName("OfficeUseORNo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PensionAgency")
                        .HasColumnName("PensionAgency")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PensionMonthly")
                        .HasColumnName("PensionMonthly")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PhoneNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PreviousAddress")
                        .HasColumnName("PreviousAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("RegionID")
                        .HasColumnName("RegionID");

                    b.Property<string>("RemittanceFrequency")
                        .HasColumnName("RemittanceFrequency")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RemittanceLocation")
                        .HasColumnName("RemittanceLocation")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RemittanceMonthlyAmount")
                        .HasColumnName("RemittanceMonthlyAmount")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RemittanceName")
                        .HasColumnName("RemittanceName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RemittanceRelationship")
                        .HasColumnName("RemittanceRelationship")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RentingAddress")
                        .HasColumnName("RentingAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RentingName")
                        .HasColumnName("RentingName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RentingTelNo")
                        .HasColumnName("RentingTelNo")
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("SpouseAge")
                        .HasColumnName("SpouseAge");

                    b.Property<string>("SpouseHowLong")
                        .HasColumnName("SpouseHowLong")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpouseIncomeSource")
                        .HasColumnName("SpouseIncomeSource")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SpouseName")
                        .HasColumnName("SpouseName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SpouseOfficeAddress")
                        .HasColumnName("SpouseOfficeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SpousePosition")
                        .HasColumnName("SpousePosition")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SpouseSalary")
                        .HasColumnName("SpouseSalary")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SpouseTelNo")
                        .HasColumnName("SpouseTelNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("StabilityOfResidence")
                        .HasColumnName("StabilityOfResidence")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("StreetBarangay")
                        .HasColumnName("StreetBarangay")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TelNo")
                        .HasColumnName("TelNo")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("TypeOf")
                        .HasColumnName("TypeOf")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("LoanID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BranchID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanAttachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttachmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .HasColumnName("Filename")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.HasKey("AttachmentID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanAttachment");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanCreditHistory", b =>
                {
                    b.Property<int>("CreditHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreditHistoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HistoryCompanyName")
                        .HasColumnName("HistoryCompanyName")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("HistoryDatePurchase")
                        .HasColumnName("HistoryDatePurchase");

                    b.Property<decimal?>("HistoryRemainingBalance")
                        .HasColumnName("HistoryRemainingBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("HistoryTerms")
                        .HasColumnName("HistoryTerms")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("HistoryTypeOfUnit")
                        .HasColumnName("HistoryTypeOfUnit")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.HasKey("CreditHistoryID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanCreditHistory");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanCustomerChildren", b =>
                {
                    b.Property<int>("ChildID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChildID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChildAge")
                        .HasColumnName("ChildAge");

                    b.Property<string>("ChildEmploySchool")
                        .HasColumnName("ChildEmploySchool")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildEmploySchoolAddress")
                        .HasColumnName("ChildEmploySchoolAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildHomeAddress")
                        .HasColumnName("ChildHomeAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildHowLong")
                        .HasColumnName("ChildHowLong")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildName")
                        .HasColumnName("ChildName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildPosGrade")
                        .HasColumnName("ChildPosGrade")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ChildTelNo")
                        .HasColumnName("ChildTelNo")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.HasKey("ChildID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanCustomerChildren");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanPersonalProperty", b =>
                {
                    b.Property<int>("PersonalPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonalPropertyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.Property<string>("Property")
                        .HasColumnName("Property")
                        .HasColumnType("varchar(250)");

                    b.HasKey("PersonalPropertyID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanPersonalProperty");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanUnitDesired", b =>
                {
                    b.Property<int>("UnitDesiredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitDesiredID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesiredAccounting")
                        .HasColumnName("DesiredAccounting")
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("DesiredAmount")
                        .HasColumnName("DesiredAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DesiredBrandModel")
                        .HasColumnName("DesiredBrandModel")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DesiredCode")
                        .HasColumnName("DesiredCode")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DesiredSerialNo")
                        .HasColumnName("DesiredSerialNo")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.HasKey("UnitDesiredID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanUnitDesired");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanUnitDesiredTC", b =>
                {
                    b.Property<int>("UnitDesiredTCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitDesiredTCID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesiredTCBrandModel")
                        .HasColumnName("DesiredTCBrandModel")
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("DesiredTCDownPayment")
                        .HasColumnName("DesiredTCDownPayment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DesiredTCMonthlyInstallment")
                        .HasColumnName("DesiredTCMonthlyInstallment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DesiredTCRemarks")
                        .HasColumnName("DesiredTCRemarks")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DesiredTCTerms")
                        .HasColumnName("DesiredTCTerms")
                        .HasColumnType("varchar(250)");

                    b.Property<decimal?>("DesiredTCTotalPrice")
                        .HasColumnName("DesiredTCTotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DesiredTCTotalRebate")
                        .HasColumnName("DesiredTCTotalRebate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("LoanID")
                        .HasColumnName("LoanID");

                    b.HasKey("UnitDesiredTCID");

                    b.HasIndex("LoanID");

                    b.ToTable("LoanUnitDesiredTC");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuestionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Qquestion")
                        .HasColumnName("Question")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("QuestionTypeID")
                        .HasColumnName("QuestionTypeID");

                    b.Property<int>("TemplateID")
                        .HasColumnName("TemplateID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("QuestionID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionTypeID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("MobileJO.Data.Models.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuestionTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("varchar(50)");

                    b.HasKey("QuestionTypeID");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("MobileJO.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnName("ExpiresUtc");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnName("IssuedUtc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("Token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasAlternateKey("Token")
                        .HasName("refreshToken_Token");

                    b.HasAlternateKey("Username")
                        .HasName("refreshToken_UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RegionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .HasColumnName("RegionName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("RegionID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("MobileJO.Data.Models.RegionCity", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnName("CityName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RegionID")
                        .HasColumnName("RegionID");

                    b.Property<string>("ZipCode")
                        .HasColumnName("ZipCode")
                        .HasColumnType("varchar(6)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.ToTable("RegionCity");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Response", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ResponseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchID")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyID")
                        .HasColumnName("CompanyID");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnName("DateSubmitted");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("IsApproved");

                    b.Property<DateTime>("LastSyncDate")
                        .HasColumnName("LastSyncDate");

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Shet")
                        .HasColumnName("Shet");

                    b.Property<bool>("Status")
                        .HasColumnName("Status");

                    b.Property<int>("TemplateID")
                        .HasColumnName("TemplateID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserID")
                        .HasColumnName("UserID");

                    b.HasKey("ResponseID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemplateID");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserID");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("MobileJO.Data.Models.RevertJobOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnName("ApprovedBy");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("IsApproved");

                    b.Property<bool>("IsUsed")
                        .HasColumnName("IsUsed");

                    b.Property<int>("JobOrderID")
                        .HasColumnName("JobOrderID");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("RequestDate");

                    b.Property<DateTime?>("RevertDate")
                        .HasColumnName("RevertDate");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("JobOrderID");

                    b.ToTable("RevertJobOrder");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnName("Role")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            ID = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.SyncLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseNumber")
                        .HasColumnName("CaseNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateSync")
                        .HasColumnName("DateSync");

                    b.Property<string>("ErrMsg")
                        .HasColumnName("ErrMsg")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("SyncLog");
                });

            modelBuilder.Entity("MobileJO.Data.Models.TaggedCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseID");

                    b.Property<int>("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("TaggedCase");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CaseID = 1,
                            JobOrderID = 1
                        },
                        new
                        {
                            ID = 2,
                            CaseID = 2,
                            JobOrderID = 1
                        });
                });

            modelBuilder.Entity("MobileJO.Data.Models.Template", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TemplateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("Category")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("MaxLimit")
                        .HasColumnName("MaxLimit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("TemplateID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Template_Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .HasColumnName("BranchID");

                    b.Property<int>("TemplateID")
                        .HasColumnName("TemplateID");

                    b.HasKey("BranchID", "TemplateID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Template_Branch");
                });

            modelBuilder.Entity("MobileJO.Data.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("AllowedToLogin")
                        .HasColumnName("AllowedToLogin");

                    b.Property<int>("BranchID")
                        .HasColumnName("BranchID");

                    b.Property<int>("CompanyID")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Memo")
                        .HasColumnName("Memo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNo")
                        .HasColumnName("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnName("RoleID");

                    b.Property<string>("TelephoneNo")
                        .HasColumnName("TelephoneNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserTypeID")
                        .HasColumnName("UserTypeID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MobileJO.Data.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserTypeID");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Account", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Answer", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.AssignedCase", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Attachment", b =>
                {
                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("Attachment")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Branch", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Company", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Choice", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Question", "QuestionId")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Company", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdateBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.EmailSetup", b =>
                {
                    b.HasOne("MobileJO.Data.Models.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.ForgotPassword", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrder", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderBillingType", b =>
                {
                    b.HasOne("MobileJO.Data.Models.BillingType", "BillingType")
                        .WithMany()
                        .HasForeignKey("BillingTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("JobOrderBillingType")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Loan", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("MobileJO.Data.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanAttachment", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanCreditHistory", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanCustomerChildren", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanPersonalProperty", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanUnitDesired", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.LoanUnitDesiredTC", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Question", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.QuestionType", "QuestionTypeId")
                        .WithMany()
                        .HasForeignKey("QuestionTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Template", "TemplateId")
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.RegionCity", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Response", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.RevertJobOrder", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany()
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.TaggedCase", b =>
                {
                    b.HasOne("MobileJO.Data.Models.AssignedCase", "AssignedCases")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("TaggedCase")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Template", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Template_Branch", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Branch", "BranchId")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Template", "TemplateId")
                        .WithMany()
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.User", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
