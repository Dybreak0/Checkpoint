// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileJO.Data;

namespace MobileJO.Data.Migrations
{
    [DbContext(typeof(BaseCodeEntities))]
    [Migration("20190408053242_updated_tables123")]
    partial class updated_tables123
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactNo")
                        .HasColumnName("ContactNo")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactPerson")
                        .HasColumnName("ContactPerson")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Memo")
                        .HasColumnName("Memo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MobileJO.Data.Models.ApplicationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationName")
                        .HasColumnName("ApplicationName")
                        .HasColumnType("varchar(250)");

                    b.HasKey("ID");

                    b.ToTable("ApplicationType");
                });

            modelBuilder.Entity("MobileJO.Data.Models.AssignedCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnName("AccountID");

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnName("ApplicationTypeID");

                    b.Property<string>("AssignedTo")
                        .HasColumnName("AssignedTo");

                    b.Property<int>("CaseNumber")
                        .HasColumnName("CaseNumber");

                    b.Property<string>("CaseSubject")
                        .HasColumnName("CaseSubject")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Priority")
                        .HasColumnName("Priority")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("ModifiedDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApplicationTypeID");

                    b.ToTable("AssignedCase");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .HasColumnName("Filename")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("JobOrderID")
                        .HasColumnName("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("MobileJO.Data.Models.BillingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingTypeName")
                        .HasColumnName("BillingTypeName");

                    b.HasKey("ID");

                    b.ToTable("BillingType");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<string>("AllowedOrigin");

                    b.Property<bool?>("ApplicationType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RefreshTokenLifeTime");

                    b.Property<string>("Secret");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnName("AccountID");

                    b.Property<string>("ActivityDetails")
                        .HasColumnName("ActivityDetails")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnName("ApplicationTypeID");

                    b.Property<string>("Attendees")
                        .HasColumnName("Attendees")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Branch")
                        .HasColumnName("Branch")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClientRating")
                        .HasColumnName("ClientRating");

                    b.Property<string>("ClientSignature")
                        .HasColumnName("ClientSignature")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnName("DateTimeEnd");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnName("DateTimeStart");

                    b.Property<bool>("IsBilled")
                        .HasColumnName("IsBilled");

                    b.Property<bool>("IsCollaterals")
                        .HasColumnName("IsCollaterals");

                    b.Property<bool>("IsFixed")
                        .HasColumnName("IsFixed");

                    b.Property<bool>("IsSatisfied")
                        .HasColumnName("IsSatisfied");

                    b.Property<string>("JobOrderNumber")
                        .HasColumnName("JobOrderNumber")
                        .HasColumnType("varchar(9)");

                    b.Property<string>("JobOrderSubject")
                        .HasColumnName("JobOrderSubject")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NextStep")
                        .HasColumnName("NextStep")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PreventiveAction")
                        .HasColumnName("PreventiveAction")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("RootCauseAnalysis")
                        .HasColumnName("RootCauseAnalysis")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("StatusID")
                        .HasColumnName("StatusID");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApplicationTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("JobOrder");
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderBillingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingTypeID")
                        .HasColumnName("BillingTypeID");

                    b.Property<int>("JobOrderID")
                        .HasColumnName("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("BillingTypeID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("JobOrderBillingType");
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID");

                    b.ToTable("JobOrderStatus");
                });

            modelBuilder.Entity("MobileJO.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Class");

                    b.Property<string>("Country");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("EnrollYear");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("MobileJO.Data.Models.TaggedCase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseID");

                    b.Property<int>("JobOrderID");

                    b.HasKey("ID");

                    b.HasIndex("CaseID");

                    b.HasIndex("JobOrderID");

                    b.ToTable("TaggedCase");
                });

            modelBuilder.Entity("MobileJO.Data.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("AllowedToLogin")
                        .HasColumnName("AllowedToLogin");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Memo")
                        .HasColumnName("Memo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNo")
                        .HasColumnName("MobileNo")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("PasswordSalt")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelephoneNo")
                        .HasColumnName("TelephoneNo")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Username")
                        .HasColumnName("Username")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Account", b =>
                {
                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.AssignedCase", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.Attachment", b =>
                {
                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("Attachment")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrder", b =>
                {
                    b.HasOne("MobileJO.Data.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.User", "UserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.JobOrderBillingType", b =>
                {
                    b.HasOne("MobileJO.Data.Models.BillingType", "BillingType")
                        .WithMany()
                        .HasForeignKey("BillingTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("JobOrderBillingType")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MobileJO.Data.Models.TaggedCase", b =>
                {
                    b.HasOne("MobileJO.Data.Models.AssignedCase", "AssignedCases")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MobileJO.Data.Models.JobOrder", "JobOrder")
                        .WithMany("TaggedCase")
                        .HasForeignKey("JobOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
